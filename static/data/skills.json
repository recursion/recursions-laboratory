{
  "skills": [
    {
      "name": "Adaptability",
      "level": "5",
      "icon": "fas fa-graduation-cap",
      "description": "One of my greatest strengths is picking up a new technology and putting it to work. As a full stack 'generalist', and someone who loves jumping into and learning about new tech stacks/languages/frameworks, I find this ability to be extremely valuable."
    },
    {
      "name": "RTFM",
      "level": "5",
      "icon": "fas fa-book",
      "description": "Reading the Freaking Manual: One of the few skills I have continually used, and aquired near mastery of. Quickly finding, and 'Groking' information has proven to be critical when working across a multitude of technologies on a regular basis."
    },
    {
      "name": "JavaScript",
      "level": "4",
      "icon": "fab fa-node-js",
      "description": "I'm quite adept and comfortable with modern JavaScript including: Legacy, ES6, and some of ESNext. I have been tinkering with JS almost since it was first created, and while I still need to check documention regularly (who has the memory not to?), I am very familiar with it's constructs, as well as employing the good parts, while avoiding the bad (I'm looking at you 'this')."
    },
    {
      "name": "CSS/SCSS",
      "level": "3",
      "icon": "fab fa-css3-alt",
      "description": "I know my way around css and scss, and can generally get things positioned the way I need, particularly when using a library like bulma or bootstrap. All of that said, design is not my strong suite. I can generally get things laid out and working responsively, but it likely wont be the most attractive thing you ever saw! My concept of color schemes is pretty attrocious."
    },
    {
      "name": "Node.js",
      "level": "3",
      "icon": "fab fa-node",
      "description": "While Node is 'just JavaScript', there are absolutely some differences between working on front-end javascript and backend node, so I think it's worth mentioning seperately. It has been a while since I've done any heavy back end work, but I have done it, mostly with express/mongo/postgress oriented stacks, and I am capable of doing it when needed. I have worked with both websockets and REST Api's from the back (and front) end."
    },
    {
      "name": "React/Redux",
      "level": "3",
      "icon": "fab fa-react",
      "description": "I have built a few projects recently using React/Redux and am quite familiar with the pattern. I definitely like Reacts functional nature and one way data flow. It's a nice way to build UI in JavaScript and I'm quite comfortable working with it, and it's related libraries. I have also tinkered a bit with ReasonML/ReasonReact and am looking forward to seeing it become more widely used as having static types, immutability, and redux type state out of the box is much nicer than all the boilerplate required to coerce javascript into using those patterns."
    },
    {
      "name": "Git",
      "level": "3",
      "icon": "fab fa-github-square",
      "description": "Never go coding without it. I have been using git for many years now for all of my coding. I can still remember some of my archival strategies for projects before git... It's an amazing tool and I'm quite comfortable with using commits, pulls, pushes, branches, clones, forks, etc. Admittedly its been a while since I've done any pull-requests, rebases, or merges... but I HAVE done them, and feel I would have little trouble adapting to, and using a sane (and possibly insane) git strategy - with a team."
    },
    {
      "name": "DevOps",
      "level": "2",
      "icon": "fas fa-desktop",
      "description": "When it comes to linux and VPS setups, I am quite comfortable and capable of configuring and deplying services, using ssh, and the cli, but my experience with 'cloud' services is pretty much limited to a bit of reading and poking around with docker, heroku, aws, and azure services. I would love to get some more experience in this area. When it comes to wrestling with dev. environments I'm quite adept. :)"
    },
    {
      "name": "Databases",
      "level": "2",
      "icon": "fas fa-database",
      "description": "I have used both SQL and noSQL databases over the years, and while It's been a while since I've done anything with one, I am certainly capable of configuring/deploying simple databases, as well as setting up tables, models, and creating basic interactions. I have worked with a team to architect and normalize a database for a reasonaly large application. I have a general grasp of relational models and normalization practices. I'm certain that with a little more experience, I would quickly increase my productivity with them, but for now, it's likely anything did with a database would be a bit slow, and likely full of optimization opportunities :P."
    },
    {
      "name": "Algorithms and Data Structures",
      "level": "2",
      "icon": "fa fa-microchip",
      "description": "I definitely will not be writing any ground breaking algos - but I generally know when a special algorithm and/or data type might be needed. I have done some basic study and practice of/with algos and data structures - and will most likely . I certainly understand Big O notation, and can generally determine if an algo falls within Constant, Linear, Quadratic or Logarithmic time. If its more mathmatically complex than one of those, I probably wouldnt be able to name it.  Same goes for data structures - I wont be hand-coding any binary-search-trees, but I'll know when I need one, and how to find one that is well-implemented and tested."
    },
    {
      "name": "TDD",
      "level": "2",
      "icon": "fa fa-clipboard list",
      "description": "While I have created several projects using Test Driven Development, I still find it to be a bit of a departure from my default mode of coding. That said, I definitely see the value of the test first approach, as it forces you to really think about your design. TDD has also helped me appreciate functional programming more, as pure functions really make the testing process much less painful. I would love to be in an environment where I got to do more of it."
    },
    {
      "name": "Elm",
      "level": "2",
      "icon": "fa fa-heart",
      "description": "Elm was really my introduction to statically-typed, functional programming - and it's awesome. While there are certainly some humps to get over with Elm, there is something magical about being able to refactor with confidence - knowing that everything will come back together without any loose ends or forgotten variables - you just dont get that in javascript. It's also really nice to get all the features (immutability, unidirectional data flow, etc) modern javascript is trying to force together - out of the box. I look forward to seeing this become a more commonly used approach to front-end development - and to using it more myself."
    },
    {
      "name": "Vim",
      "level": "2",
      "icon": "fa fa-edit",
      "description": "Vim's basic editing and navigation commands are muscle memory at this point. I'm no vim power user, infact I use VSCode as my 'IDE' with it's powerful vim emulation plugin. It's awesome.  I like to think of it as a little editing wizardry at my fingertips!!"
    },
    {
      "name": "Bulma",
      "level": "2",
      "icon": "fab fa-css3-alt",
      "description": "While I think I could make myself useful in any CSS library fairly quickly, it might be worth mentioning that I have been using Bulma.io lately. It makes lots of common styling tasks and building mobile-first,             responsive pages quicker, and easier."
    },
    {
      "name": "",
      "level": "",
      "icon": "",
      "description": ""
    }
  ]
}
